// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * ICOS Shell
 *
 * This is the ICOS Shell based on the OpenAPI 3.0 specification.
 *
 * API version: 1.0.11
 */

package shellbackend

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// DeploymentAPIController binds http requests to an api service and writes the service results to the http response
type DeploymentAPIController struct {
	service DeploymentAPIServicer
	errorHandler ErrorHandler
}

// DeploymentAPIOption for how the controller is set up.
type DeploymentAPIOption func(*DeploymentAPIController)

// WithDeploymentAPIErrorHandler inject ErrorHandler into controller
func WithDeploymentAPIErrorHandler(h ErrorHandler) DeploymentAPIOption {
	return func(c *DeploymentAPIController) {
		c.errorHandler = h
	}
}

// NewDeploymentAPIController creates a default api controller
func NewDeploymentAPIController(s DeploymentAPIServicer, opts ...DeploymentAPIOption) *DeploymentAPIController {
	controller := &DeploymentAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the DeploymentAPIController
func (c *DeploymentAPIController) Routes() Routes {
	return Routes{
		"GetDeployments": Route{
			strings.ToUpper("Get"),
			"/api/v3/deployment/",
			c.GetDeployments,
		},
		"CreateDeployment": Route{
			strings.ToUpper("Post"),
			"/api/v3/deployment/",
			c.CreateDeployment,
		},
		"GetDeploymentById": Route{
			strings.ToUpper("Get"),
			"/api/v3/deployment/{deploymentId}",
			c.GetDeploymentById,
		},
		"UpdateDeployment": Route{
			strings.ToUpper("Put"),
			"/api/v3/deployment/{deploymentId}",
			c.UpdateDeployment,
		},
		"DeleteDeploymentById": Route{
			strings.ToUpper("Delete"),
			"/api/v3/deployment/{deploymentId}",
			c.DeleteDeploymentById,
		},
		"StartDeploymentById": Route{
			strings.ToUpper("Delete"),
			"/api/v3/deployment/{deploymentId}/start",
			c.StartDeploymentById,
		},
		"StopDeploymentById": Route{
			strings.ToUpper("Delete"),
			"/api/v3/deployment/{deploymentId}/stop",
			c.StopDeploymentById,
		},
	}
}

// GetDeployments - Returns a list of deployments
func (c *DeploymentAPIController) GetDeployments(w http.ResponseWriter, r *http.Request) {
	apiKeyParam := r.Header.Get("api_key")
	result, err := c.service.GetDeployments(r.Context(), apiKeyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// CreateDeployment - Creates a new deployment
func (c *DeploymentAPIController) CreateDeployment(w http.ResponseWriter, r *http.Request) {
	bodyParam := map[string]interface{}{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	apiKeyParam := r.Header.Get("api_key")
	result, err := c.service.CreateDeployment(r.Context(), bodyParam, apiKeyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetDeploymentById - Find deployment by ID
func (c *DeploymentAPIController) GetDeploymentById(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	deploymentIdParam := params["deploymentId"]
	if deploymentIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"deploymentId"}, nil)
		return
	}
	apiKeyParam := r.Header.Get("api_key")
	result, err := c.service.GetDeploymentById(r.Context(), deploymentIdParam, apiKeyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateDeployment - Updates a deployment
func (c *DeploymentAPIController) UpdateDeployment(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	deploymentIdParam := params["deploymentId"]
	if deploymentIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"deploymentId"}, nil)
		return
	}
	bodyParam := map[string]interface{}{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	apiKeyParam := r.Header.Get("api_key")
	result, err := c.service.UpdateDeployment(r.Context(), deploymentIdParam, bodyParam, apiKeyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteDeploymentById - Deletes a deployment
func (c *DeploymentAPIController) DeleteDeploymentById(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	deploymentIdParam := params["deploymentId"]
	if deploymentIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"deploymentId"}, nil)
		return
	}
	apiKeyParam := r.Header.Get("api_key")
	result, err := c.service.DeleteDeploymentById(r.Context(), deploymentIdParam, apiKeyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// StartDeploymentById - Starts a deployment
func (c *DeploymentAPIController) StartDeploymentById(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	deploymentIdParam := params["deploymentId"]
	if deploymentIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"deploymentId"}, nil)
		return
	}
	apiKeyParam := r.Header.Get("api_key")
	result, err := c.service.StartDeploymentById(r.Context(), deploymentIdParam, apiKeyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// StopDeploymentById - Stops a deployment
func (c *DeploymentAPIController) StopDeploymentById(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	deploymentIdParam := params["deploymentId"]
	if deploymentIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"deploymentId"}, nil)
		return
	}
	apiKeyParam := r.Header.Get("api_key")
	result, err := c.service.StopDeploymentById(r.Context(), deploymentIdParam, apiKeyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
