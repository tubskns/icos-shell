// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * ICOS Shell
 *
 * This is the ICOS Shell based on the OpenAPI 3.0 specification.
 *
 * API version: 1.0.11
 */

package shellbackend

import (
	"context"
	"fmt"
	"log"
	"net/http"
	"github.com/spf13/viper"
	"strings"
)

// PredictAPIService is a service that implements the logic for the PredictAPIServicer
// This service should implement the business logic for every endpoint for the PredictAPI API.
// Include any external packages or services that will be required by this service.
type PredictAPIService struct {
}

// NewPredictAPIService creates a default api service
func NewPredictAPIService() *PredictAPIService {
	return &PredictAPIService{}
}

// PredictMetrics - Predict metrics development based on model and input metrics
func (s *PredictAPIService) PredictMetrics(ctx context.Context, body map[string]interface{}, apiKey string) (ImplResponse, error) {
	log.Printf("Hit PredictAPIService\n")
	jsonData := body["content"].(string)

	req, _ := http.NewRequestWithContext(ctx, http.MethodPost, viper.GetString("components.intelligence.server") + ("components.intelligence.predict_metrics"), strings.NewReader(jsonData))
	log.Printf("Sending a POST request to: " + viper.GetString("components.intelligence.server") + ("components.intelligence.predict_metrics"))
	fmt.Printf("Payload:\n%v\n", jsonData)

	req = addBearerToToken(ctx, apiKey, req)
	req.Header.Add("Content-Type", "application/json")
	client := &http.Client{}
	resp, err := client.Do(req)
	log.Printf("Response: ", resp)
	if err != nil {
		return errorConnect(resp, err)
	} else {
		if resp.StatusCode == 200 {
			return Response(resp.StatusCode, unmarshalResponse(resp)), nil
		} else {
			return unexpectedCode(resp.StatusCode)
		}
	}
}
