// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * ICOS Shell
 *
 * This is the ICOS Shell based on the OpenAPI 3.0 specification.
 *
 * API version: 1.0.11
 */

package shellbackend

import (
	"context"
	"fmt"
	"log"
	"net/http"
	"strings"
	"github.com/spf13/viper"
)

// MetricsAPIService is a service that implements the logic for the MetricsAPIServicer
// This service should implement the business logic for every endpoint for the MetricsAPI API.
// Include any external packages or services that will be required by this service.
type MetricsAPIService struct {
}

// NewMetricsAPIService creates a default api service
func NewMetricsAPIService() *MetricsAPIService {
	return &MetricsAPIService{}
}

// TrainMetrics - Trains a model on a set of metrics
func (s *MetricsAPIService) TrainMetrics(ctx context.Context, body map[string]interface{}, apiKey string) (ImplResponse, error) {

jsonData := body["content"].(string)

	req, _ := http.NewRequestWithContext(ctx, http.MethodPost, viper.GetString("components.intelligence.server") + viper.GetString("components.intelligence.train_metrics"), strings.NewReader(jsonData))
	log.Printf("Sending a POST request to: " + viper.GetString("components.intelligence.server") + viper.GetString("components.intelligence.train_metrics"))
	fmt.Printf("Payload:\n%v\n", jsonData)

	req = addBearerToToken(ctx, apiKey, req)
	req.Header.Add("Content-Type", "application/json")
	client := &http.Client{}
	resp, err := client.Do(req)
	log.Printf("Response: ", resp)
	if err != nil {
		return errorConnect(resp, err)
	} else {
		return Response(resp.StatusCode, unmarshalResponse(resp)), nil
	}
}

// PredictMetrics - Predict metrics development based on model and input metrics
func (s *MetricsAPIService) PredictMetrics(ctx context.Context, body map[string]interface{}, apiKey string) (ImplResponse, error) {

log.Printf("Hit PredictAPIService\n")
	jsonData := body["content"].(string)

	req, _ := http.NewRequestWithContext(ctx, http.MethodPost, viper.GetString("components.intelligence.server") + viper.GetString("components.intelligence.predict_metrics"), strings.NewReader(jsonData))
	log.Printf("Sending a POST request to: " + viper.GetString("components.intelligence.server") + viper.GetString("components.intelligence.predict_metrics"))
	fmt.Printf("Payload:\n%v\n", jsonData)

	req = addBearerToToken(ctx, apiKey, req)
	req.Header.Add("Content-Type", "application/json")
	client := &http.Client{}
	resp, err := client.Do(req)
	log.Printf("Response: ", resp)
	if err != nil {
		return errorConnect(resp, err)
	} else {
		return Response(resp.StatusCode, unmarshalResponse(resp)), nil
	}

}

// DeleteMetrics - Delete metrics model
func (s *MetricsAPIService) DeleteMetrics(ctx context.Context, body map[string]interface{}, apiKey string) (ImplResponse, error) {

log.Printf("Hit DeleteAPIService\n")
	jsonData := body["content"].(string)

	req, _ := http.NewRequestWithContext(ctx, http.MethodPost, viper.GetString("components.intelligence.server") + viper.GetString("components.intelligence.delete_metrics"), strings.NewReader(jsonData))
	log.Printf("Sending a POST request to: " + viper.GetString("components.intelligence.server") + viper.GetString("components.intelligence.delete_metrics"))
	fmt.Printf("Payload:\n%v\n", jsonData)

	req = addBearerToToken(ctx, apiKey, req)
	req.Header.Add("Content-Type", "application/json")
	client := &http.Client{}
	resp, err := client.Do(req)
	log.Printf("Response: ", resp)
	if err != nil {
		return errorConnect(resp, err)
	} else {
		return Response(resp.StatusCode, unmarshalResponse(resp)), nil
	}

}

// GetMetrics - Returns a list of metric models
func (s *MetricsAPIService) GetMetrics(ctx context.Context, apiKey string) (ImplResponse, error) {

	req, _ := http.NewRequestWithContext(ctx, http.MethodPut, viper.GetString("components.intelligence.server") + viper.GetString("components.intelligence.get_metrics"), nil)
	log.Printf("Sending a PUT request to: " + viper.GetString("components.intelligence.server") + viper.GetString("components.intelligence.get_metrics"))

	req = addBearerToToken(ctx, apiKey, req)
	req.Header.Add("Content-Type", "application/json")
	client := &http.Client{}
	resp, err := client.Do(req)
	log.Printf("Response: ", resp)
	if err != nil {
		return errorConnect(resp, err)
	} else {
		return Response(resp.StatusCode, unmarshalResponse(resp)), nil
	}
}
