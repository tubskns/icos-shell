// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * ICOS Shell
 *
 * This is the ICOS Shell based on the OpenAPI 3.0 specification.
 *
 * API version: 1.0.11
 */

package shellbackend

import (
	"encoding/json"
	"net/http"
	"strings"
)

// MetricsAPIController binds http requests to an api service and writes the service results to the http response
type MetricsAPIController struct {
	service MetricsAPIServicer
	errorHandler ErrorHandler
}

// MetricsAPIOption for how the controller is set up.
type MetricsAPIOption func(*MetricsAPIController)

// WithMetricsAPIErrorHandler inject ErrorHandler into controller
func WithMetricsAPIErrorHandler(h ErrorHandler) MetricsAPIOption {
	return func(c *MetricsAPIController) {
		c.errorHandler = h
	}
}

// NewMetricsAPIController creates a default api controller
func NewMetricsAPIController(s MetricsAPIServicer, opts ...MetricsAPIOption) *MetricsAPIController {
	controller := &MetricsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the MetricsAPIController
func (c *MetricsAPIController) Routes() Routes {
	return Routes{
		"TrainMetrics": Route{
			strings.ToUpper("Post"),
			"/api/v3/metrics/train",
			c.TrainMetrics,
		},
		"PredictMetrics": Route{
			strings.ToUpper("Post"),
			"/api/v3/metrics/predict",
			c.PredictMetrics,
		},
		"GetMetrics": Route{
			strings.ToUpper("Get"),
			"/api/v3/metrics/get",
			c.GetMetrics,
		},
	}
}

// TrainMetrics - Trains a model on a set of metrics
func (c *MetricsAPIController) TrainMetrics(w http.ResponseWriter, r *http.Request) {
	var bodyParam map[string]interface{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	apiKeyParam := r.Header.Get("api_key")
	result, err := c.service.TrainMetrics(r.Context(), bodyParam, apiKeyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// PredictMetrics - Predict metrics development based on model and input metrics
func (c *MetricsAPIController) PredictMetrics(w http.ResponseWriter, r *http.Request) {
	var bodyParam map[string]interface{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	apiKeyParam := r.Header.Get("api_key")
	result, err := c.service.PredictMetrics(r.Context(), bodyParam, apiKeyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetMetrics - Returns a list of metric models
func (c *MetricsAPIController) GetMetrics(w http.ResponseWriter, r *http.Request) {
	apiKeyParam := r.Header.Get("api_key")
	result, err := c.service.GetMetrics(r.Context(), apiKeyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
