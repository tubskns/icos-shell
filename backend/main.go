/*
 * ICOS Shell
 *
 * This is the ICOS Shell based on the OpenAPI 3.0 specification.
 *
 * API version: 1.0.11
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package main

import (
	"flag"
	"fmt"
	"log"
	"net/http"
	"os"
	shellbackend "shellbackend/go"

	"github.com/spf13/viper"
)

// CORS middleware function
func enableCors(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		// Set the CORS headers
		w.Header().Set("Access-Control-Allow-Origin", "*") // Use "*" to allow all, or specify a specific origin
		w.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE, OPTIONS")
		w.Header().Set("Access-Control-Allow-Headers", "Content-Type, Authorization, api_key")

		// Handle preflight request
		if r.Method == "OPTIONS" {
			w.WriteHeader(http.StatusOK)
			return
		}

		// Call the next handler in the chain
		next.ServeHTTP(w, r)
	})
}

func main() {

	cfgFile := flag.String("config", "config.yml", "config file")
	flag.Parse()
	cfgFileString := *cfgFile

	viper.SetConfigFile(cfgFileString)
	if err := viper.ReadInConfig(); err == nil {
		fmt.Fprintln(os.Stderr, "Config:", viper.ConfigFileUsed())
	} else {
		fmt.Fprintln(os.Stderr, "Config file not found!")
	}

	log.Printf("Backend service starting...")

	ControllerApiService := shellbackend.NewControllerAPIService()
	ControllerApiController := shellbackend.NewControllerAPIController(ControllerApiService)

	DefaultApiService := shellbackend.NewDefaultApiService()
	DefaultApiController := shellbackend.NewDefaultAPIController(DefaultApiService)

	DeploymentApiService := shellbackend.NewDeploymentAPIService()
	DeploymentApiController := shellbackend.NewDeploymentAPIController(DeploymentApiService)

	ResourceApiService := shellbackend.NewResourceAPIService()
	ResourceApiController := shellbackend.NewResourceAPIController(ResourceApiService)

	UserApiService := shellbackend.NewUserAPIService()
	UserApiController := shellbackend.NewUserAPIController(UserApiService)

	PredictApiService := shellbackend.NewPredictAPIService()
	PredictApiController := shellbackend.NewPredictAPIController(PredictApiService)

	TrainApiService := shellbackend.NewTrainAPIService()
	TrainApiController := shellbackend.NewTrainAPIController(TrainApiService)

	router := shellbackend.NewRouter(ControllerApiController, DefaultApiController, DeploymentApiController, ResourceApiController, UserApiController, PredictApiController, TrainApiController)

	handlerWithCors := enableCors(router)

	log.Fatal(http.ListenAndServe(":8080", handlerWithCors))
}
