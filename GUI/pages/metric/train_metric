import React, { useState } from 'react';
import {
  Box,
  Card,
  Typography,
  Button,
  LinearProgress,
  Snackbar,
  Alert,
} from '@mui/material';
import { styled } from '@mui/material/styles';
import axios from 'axios';

const BorderLinearProgress = styled(LinearProgress)(({ theme }) => ({
  height: 5,
  borderRadius: 5,
  '& .MuiLinearProgress-bar': {
    borderRadius: 5,
    backgroundColor: theme.palette.mode === 'light' ? '#757FEF' : '#308fe8',
  },
}));

const TrainMetrics = () => {
  const [loading, setLoading] = useState(false);
  const [success, setSuccess] = useState('');
  const [error, setError] = useState('');
  const [openSnackbar, setOpenSnackbar] = useState(false);

  const handleTrain = async () => {
    setLoading(true);
    const token = localStorage.getItem('authToken');
    try {
      const response = await axios.post('http://your-api-endpoint/metrics/train', {}, {
        headers: { Authorization: `Bearer ${token}` },
      });
      setSuccess('Training initiated successfully.');
    } catch (err) {
      setError(`Failed to start training: ${err.response?.data?.message || err.message}`);
    } finally {
      setOpenSnackbar(true);
      setLoading(false);
    }
  };

  const handleCloseSnackbar = () => {
    setOpenSnackbar(false);
    setSuccess('');
    setError('');
  };

  return (
    <Card
      sx={{
        boxShadow: 'none',
        borderRadius: '10px',
        p: '25px',
        mb: '15px',
      }}
    >
      <Box
        sx={{
          display: 'flex',
          justifyContent: 'space-between',
          alignItems: 'center',
          borderBottom: '1px solid #EEF0F7',
          pb: '10px',
          mb: '15px',
        }}
      >
        <Typography
          as="h3"
          sx={{
            fontSize: 18,
            fontWeight: 500,
          }}
        >
          Train Metrics
        </Typography>
      </Box>

      {loading && <BorderLinearProgress sx={{ mb: 2 }} />}

      <Button
        variant="contained"
        color="primary"
        onClick={handleTrain}
        disabled={loading}
      >
        Start Training
      </Button>

      <Snackbar
        open={openSnackbar}
        autoHideDuration={6000}
        onClose={handleCloseSnackbar}
        anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}
      >
        <Alert
          onClose={handleCloseSnackbar}
          severity={success ? 'success' : 'error'}
          sx={{ width: '100%' }}
        >
          {success || error}
        </Alert>
      </Snackbar>
    </Card>
  );
};

export default TrainMetrics;
